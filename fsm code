module finitestate (
    input clk,
    input rst,
    
    output reg Idle,
    output reg VCC1_on,
    output reg VCC2_on,
    output reg VCC3_on
);

localparam TRANSITION_DURATION = 4'd10;

localparam state_Idle = 2'b00;
localparam state_VCC1 = 2'b01;
localparam state_VCC2 = 2'b10;
localparam state_VCC3 = 2'b11;

reg [1:0] curstate = state_Idle;
reg [1:0] nxtstate = state_Idle;
reg [3:0] count = 0;

always @(posedge clk) begin
    if (rst) begin
        curstate <= state_Idle;
    end else begin
        curstate <= nxtstate;
    end
end

always @(*) begin
    case (curstate)
        state_Idle: begin
            Idle = 1'b1;    // Set Idle high
            VCC1_on = 1'b0; // Turn off VCC1
            VCC2_on = 1'b0; // Turn off VCC2
            VCC3_on = 1'b0; // Turn off VCC3
            nxtstate = state_VCC1; // Transition to VCC1 state
        end
        state_VCC1: begin
            Idle = 1'b0;    // Set Idle low
            VCC1_on = 1'b1; // Turn on VCC1
            VCC2_on = 1'b0; // Turn off VCC2
            VCC3_on = 1'b0; // Turn off VCC3
            if (count == TRANSITION_DURATION-1) begin
                nxtstate = state_VCC2; // Transition to VCC2 state
            end
        end
        state_VCC2: begin
            Idle = 1'b0;    // Set Idle low
            VCC1_on = 1'b0; // Turn off VCC1
            VCC2_on = 1'b1; // Turn on VCC2
            VCC3_on = 1'b0; // Turn off VCC3
            if (count == TRANSITION_DURATION-1) begin
                nxtstate = state_VCC3; // Transition to VCC3 state
            end
        end
        state_VCC3: begin
            Idle = 1'b0;    // Set Idle low
            VCC1_on = 1'b0; // Turn off VCC1
            VCC2_on = 1'b0; // Turn off VCC2
            VCC3_on = 1'b1; // Turn on VCC3
            if (count == TRANSITION_DURATION-1) begin
                nxtstate = state_Idle; // Transition back to Idle state
            end
        end
    endcase
end

always @(posedge clk) begin
    if (rst) begin
        count <= 0;
    end else if (curstate != nxtstate) begin
        count <= 0;
    end else if (count != TRANSITION_DURATION-1) begin
        count <= count + 1;
    end
end

endmodule
